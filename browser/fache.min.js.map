{"version":3,"file":"fache.min.js","sources":["../src/fache.js"],"sourcesContent":["/**\r\n * Fetch and cache the response\r\n */\r\n\r\n\r\n{\r\n    const DEFAULT_CACHE_LIFETIME = 60;\r\n\r\n    class FacheStorage {\r\n\r\n        /**\r\n         * Constructor \r\n         * \r\n         */\r\n        constructor() {\r\n\r\n            this.cachedPairs = [];\r\n\r\n            throw new Error('xxx');\r\n        }\r\n\r\n        /**\r\n         * Validate and normalize init settings\r\n         *\r\n         * @param {Object} init - Initial settings\r\n         * @param {function|number|undefined} seconds - Lifetime of cache. If function, then should\r\n         *                                              return a number type\r\n         *\r\n         * @return {Object} Normalized settings with default values\r\n         */\r\n        normalizeInitSettings( init ) {\r\n\r\n            if ( typeof init !== 'undefined' && typeof init !== 'object' ) {\r\n\r\n                throw new FacheError( '`init` should be an object or undefined' );\r\n            }\r\n\r\n            let defaultSettings = {\r\n\r\n                seconds: DEFAULT_CACHE_LIFETIME\r\n            };\r\n\r\n            let settings = Object.assign( {}, defaultSettings, init );\r\n\r\n            if ( typeof settings.seconds === 'number' ) {\r\n                \r\n                settings.getCacheLifeTime = resposne => settings.seconds;\r\n            }\r\n            else if ( typeof settings.seconds === 'function' ) {\r\n\r\n                settings.getCacheLifeTime = settings.seconds;\r\n            }\r\n\r\n            return settings;\r\n        }\r\n\r\n        /**\r\n         * Fetch by URL or a Request object, then cache the response\r\n         *\r\n         * @param {string|Object} urlOrRequest - A URL string or a Request object\r\n         * @param {Object} settings - Contains both init settings of Fetch API and init settings of \r\n         *                            cache method\r\n         * @returns {Promise} A fetched promise with a cloned response\r\n         */\r\n        cache( urlOrRequest, settings ) {\r\n\r\n            let request = this.pickRequest( urlOrRequest );\r\n            let reqResPair = new RequestResponsePair( request );\r\n\r\n            this.cachedPairs.push( reqResPair );\r\n\r\n            reqResPair.fetchPromise = fetch( request, settings );\r\n            \r\n            return reqResPair.fetchPromise.then( response => { \r\n\r\n                reqResPair.response = response.clone();\r\n\r\n                let cacheLifeTime = settings.getCacheLifeTime( response.clone() );\r\n\r\n                if ( cacheLifeTime > 0 ) {\r\n\r\n                    reqResPair.invalidateResponse( \r\n                        cacheLifeTime, \r\n                        () => this.removePair( reqResPair )\r\n                    );\r\n                }\r\n                else {\r\n\r\n                    this.removePair( reqResPair );\r\n                }\r\n\r\n                return response.clone();\r\n            } );\r\n        }\r\n\r\n        /**\r\n         * Look up for a RequsetResponsePair object. If not found or expired, then start fetch\r\n         * and cache again. Otherwise return the exiting fetch promise.\r\n         *\r\n         * @param {string|Object} - Same as cache method\r\n         * @param {Object} - Same as `settings` in cache method\r\n         */\r\n        promiseGetResponse( urlOrRequest, init ) {\r\n\r\n            let setttings = this.normalizeInitSettings( init );\r\n            let reqResPair = this.getPair( urlOrRequest );\r\n\r\n            if ( reqResPair === null ) {\r\n\r\n                return this.cache( urlOrRequest, setttings );\r\n            }\r\n\r\n            return reqResPair.fetchPromise.then( response => response.clone() );\r\n        }\r\n\r\n        pickRequest( urlOrRequest ) {\r\n\r\n            let request = null;\r\n\r\n            if ( typeof urlOrRequest === 'string' ) {\r\n\r\n                request = new Request( urlOrRequest );\r\n            }\r\n            else if ( urlOrRequest instanceof Request ) {\r\n\r\n                request = urlOrRequest;\r\n            }\r\n            else {\r\n\r\n                throw new FacheError( 'Require a URL or a Request instance.' );\r\n            }\r\n\r\n            return request;\r\n        }\r\n\r\n        pickUrl( urlOrRequest ) {\r\n\r\n            let url = '';\r\n\r\n            if ( typeof urlOrRequest === 'string' ) {\r\n\r\n                url = urlOrRequest;\r\n            }\r\n            else if ( urlOrRequest instanceof Request ) {\r\n\r\n                url = urlOrRequest.url;\r\n            }\r\n            else {\r\n\r\n                throw new FacheError( 'Require a URL or a Request instance.' );\r\n            }\r\n\r\n            return url;\r\n        }    \r\n\r\n        getPair( urlOrRequest ) {\r\n\r\n            let url = this.pickUrl( urlOrRequest );\r\n\r\n            for ( let i = 0; i < this.cachedPairs.length; i ++ ) {\r\n\r\n                if ( url === this.cachedPairs[i].url ) {\r\n\r\n                    return this.cachedPairs[i];\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        removePair( reqResPair ) {\r\n\r\n            let index = this.cachedPairs.indexOf( reqResPair );\r\n\r\n            if ( index >= 0 ) {\r\n\r\n                this.cachedPairs.splice( index, 1 );\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    class RequestResponsePair {\r\n\r\n        constructor( request ) {\r\n\r\n            if ( request instanceof Request === false) {\r\n\r\n                throw new FacheError( 'Require an instance of Request or RequestRef.' );\r\n            }\r\n\r\n            this.request = request;\r\n            this.url = this.request.url;\r\n            this.response = null;\r\n            this.fetchPromise = null;            \r\n        }\r\n\r\n        invalidateResponse( seconds, onCacheExpire ) {\r\n\r\n            if ( seconds <= 0 ) {\r\n\r\n                return;\r\n            }\r\n\r\n            setTimeout( () => {\r\n                \r\n                onCacheExpire( this );\r\n\r\n            }, seconds * 1000 );\r\n        }\r\n    } \r\n\r\n    class FacheError extends Error {\r\n\r\n        constructor( message ) {\r\n\r\n            super( `[Fache] ${message}\\n` );\r\n            this.name = this.constructor.name;\r\n\r\n            if ( typeof Error.captureStackTrace === 'function' ) {\r\n            \r\n                Error.captureStackTrace( this, this.constructor );\r\n\r\n            } else {\r\n\r\n                this.stack = ( new Error( message ) ).stack; \r\n            }\r\n        }\r\n    }\r\n\r\n/* Main *******************************************************************************************/\r\n\r\n    let facheStorage = new FacheStorage();\r\n    let fache = ( urlOrRequest, init ) => facheStorage.promiseGetResponse( urlOrRequest, init );\r\n\r\n/* Expose to window object ************************************************************************/\r\n\r\n    if ( typeof window === 'undefined' ) {\r\n\r\n        throw new FacheError( 'Fache runs only in the context of a browser.' );\r\n    }\r\n    else if ( window.fetch === undefined ) {\r\n\r\n        throw new FacheError( 'Fache requires Fetch API. Look for a polyfill.' );\r\n    }\r\n    else {\r\n\r\n        window.fache = fache;\r\n        window.fache.storage = facheStorage;\r\n    }\r\n\r\n/* Expose to node application that runs in a browser e.g. React, Angular, Vue, etc ****************/\r\n\r\n    if ( typeof module !== 'undefined' ) {\r\n\r\n        module.exports = {\r\n\r\n            fache: fache,\r\n            FacheStorage: FacheStorage\r\n        };\r\n    }\r\n}\r\n\r\n"],"names":["DEFAULT_CACHE_LIFETIME","FacheStorage","cachedPairs","Error","init","_typeof","FacheError","defaultSettings","seconds","settings","Object","assign","getCacheLifeTime","resposne","urlOrRequest","request","this","pickRequest","reqResPair","RequestResponsePair","push","fetchPromise","fetch","then","response","clone","cacheLifeTime","invalidateResponse","_this","removePair","setttings","normalizeInitSettings","getPair","cache","Request","url","pickUrl","i","length","index","indexOf","splice","onCacheExpire","setTimeout","_this2","message","name","_this3","constructor","captureStackTrace","stack","facheStorage","fache","promiseGetResponse","window","undefined","storage","module","exports"],"mappings":"s/EAMUA,uBAAyB,GAEzBC,wEAQOC,YAAc,GAEb,IAAIC,MAAM,0EAYGC,WAEE,IAATA,GAAwC,WAAhBC,QAAOD,SAEjC,IAAIE,WAAY,+CAGtBC,EAAkB,CAElBC,QAASR,wBAGTS,EAAWC,OAAOC,OAAQ,GAAIJ,EAAiBH,SAElB,iBAArBK,EAASD,QAEjBC,EAASG,iBAAmB,SAAAC,UAAYJ,EAASD,SAEf,mBAArBC,EAASD,UAEtBC,EAASG,iBAAmBH,EAASD,SAGlCC,gCAWJK,EAAcL,cAEbM,EAAUC,KAAKC,YAAaH,GAC5BI,EAAa,IAAIC,oBAAqBJ,eAErCb,YAAYkB,KAAMF,GAEvBA,EAAWG,aAAeC,MAAOP,EAASN,GAEnCS,EAAWG,aAAaE,KAAM,SAAAC,GAEjCN,EAAWM,SAAWA,EAASC,YAE3BC,EAAgBjB,EAASG,iBAAkBY,EAASC,gBAEnC,EAAhBC,EAEDR,EAAWS,mBACPD,EACA,kBAAME,EAAKC,WAAYX,KAK3BU,EAAKC,WAAYX,GAGdM,EAASC,qDAWJX,EAAcV,OAE1B0B,EAAYd,KAAKe,sBAAuB3B,GACxCc,EAAaF,KAAKgB,QAASlB,UAEX,OAAfI,EAEMF,KAAKiB,MAAOnB,EAAcgB,GAG9BZ,EAAWG,aAAaE,KAAM,SAAAC,UAAYA,EAASC,8CAGjDX,OAELC,EAAU,QAEe,iBAAjBD,EAERC,EAAU,IAAImB,QAASpB,OAEtB,CAAA,KAAKA,aAAwBoB,eAMxB,IAAI5B,WAAY,wCAJtBS,EAAUD,SAOPC,kCAGFD,OAEDqB,EAAM,MAEmB,iBAAjBrB,EAERqB,EAAMrB,MAEL,CAAA,KAAKA,aAAwBoB,eAMxB,IAAI5B,WAAY,wCAJtB6B,EAAMrB,EAAaqB,WAOhBA,kCAGFrB,WAEDqB,EAAMnB,KAAKoB,QAAStB,GAEduB,EAAI,EAAGA,EAAIrB,KAAKd,YAAYoC,OAAQD,OAErCF,IAAQnB,KAAKd,YAAYmC,GAAGF,WAEtBnB,KAAKd,YAAYmC,UAIzB,wCAGCnB,OAEJqB,EAAQvB,KAAKd,YAAYsC,QAAStB,UAExB,GAATqB,SAEIrC,YAAYuC,OAAQF,EAAO,IACzB,YAObpB,0CAEWJ,8BAEJA,aAAmBmB,UAAY,QAE1B,IAAI5B,WAAY,sDAGrBS,QAAUA,OACVoB,IAAMnB,KAAKD,QAAQoB,SACnBX,SAAW,UACXH,aAAe,qEAGJb,EAASkC,cAEpBlC,GAAW,GAKhBmC,WAAY,WAERD,EAAeE,IAEN,IAAVpC,YAILF,kCAEWuC,0HAESA,WACbC,KAAOC,EAAKC,YAAYF,KAEW,mBAA5B3C,MAAM8C,kBAEd9C,MAAM8C,oEAAyBF,EAAKC,eAI/BE,MAAU,IAAI/C,MAAO0C,GAAYK,4CAbzB/C,aAoBrBgD,aAAe,IAAIlD,aACnBmD,MAAQ,SAAEtC,EAAcV,UAAU+C,aAAaE,mBAAoBvC,EAAcV,OAI9D,oBAAXkD,aAEF,IAAIhD,WAAY,gDAErB,QAAsBiD,IAAjBD,OAAOhC,YAEP,IAAIhB,WAAY,kDAItBgD,OAAOF,MAAQA,MACfE,OAAOF,MAAMI,QAAUL,aAKJ,oBAAXM,SAERA,OAAOC,QAAU,CAEbN,MAAOA,MACPnD,aAAcA"}